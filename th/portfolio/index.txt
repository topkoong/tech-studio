1:"$Sreact.fragment"
2:I[6190,[],""]
3:I[4660,[],""]
6:I[6327,[],"OutletBoundary"]
8:I[6566,[],"AsyncMetadataOutlet"]
a:I[6327,[],"ViewportBoundary"]
c:I[6327,[],"MetadataBoundary"]
d:"$Sreact.suspense"
f:I[8470,[],""]
:HL["/_next/static/css/813c64fd346b482e.css","style"]
0:{"P":null,"b":"FniCE8NTLTyrpzGSHDsF1","p":"","c":["","th","portfolio",""],"i":false,"f":[[["",{"children":[["locale","th","d"],{"children":["portfolio",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/813c64fd346b482e.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["locale","th","d"],["$","$1","c",{"children":[null,"$L4"]}],{"children":["portfolio",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":["$L7",["$","$L8",null,{"promise":"$@9"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$La",null,{"children":"$Lb"}],null],["$","$Lc",null,{"children":["$","div",null,{"hidden":true,"children":["$","$d",null,{"fallback":null,"children":"$Le"}]}]}]]}],false]],"m":"$undefined","G":["$f",[]],"s":false,"S":true}
10:I[5672,["452","static/chunks/452-e1843827d956986f.js","169","static/chunks/169-8808b033f7a4a331.js","537","static/chunks/537-9e2f5670ec35cf41.js","170","static/chunks/app/%5Blocale%5D/portfolio/page-35fd67a182c796fb.js"],"default"]
11:I[2645,["452","static/chunks/452-e1843827d956986f.js","169","static/chunks/169-8808b033f7a4a331.js","537","static/chunks/537-9e2f5670ec35cf41.js","170","static/chunks/app/%5Blocale%5D/portfolio/page-35fd67a182c796fb.js"],"FloatingParticles"]
12:I[3308,["452","static/chunks/452-e1843827d956986f.js","169","static/chunks/169-8808b033f7a4a331.js","537","static/chunks/537-9e2f5670ec35cf41.js","170","static/chunks/app/%5Blocale%5D/portfolio/page-35fd67a182c796fb.js"],"FloatingMascots"]
13:I[56,["452","static/chunks/452-e1843827d956986f.js","169","static/chunks/169-8808b033f7a4a331.js","537","static/chunks/537-9e2f5670ec35cf41.js","170","static/chunks/app/%5Blocale%5D/portfolio/page-35fd67a182c796fb.js"],"PortfolioHero"]
14:I[992,["452","static/chunks/452-e1843827d956986f.js","169","static/chunks/169-8808b033f7a4a331.js","537","static/chunks/537-9e2f5670ec35cf41.js","170","static/chunks/app/%5Blocale%5D/portfolio/page-35fd67a182c796fb.js"],"PortfolioGrid"]
19:I[1239,["450","static/chunks/app/%5Blocale%5D/layout-40bb82a3c937926b.js"],"Providers"]
15:T3913,
# API & Microservices Platform

A comprehensive microservices platform designed to handle enterprise-scale applications with high availability, performance, and scalability. Built using Spring Boot, Kafka, and modern containerization technologies.

## Project Overview

This microservices platform was developed for an enterprise client requiring a scalable, maintainable architecture to support their growing business needs. The platform handles millions of requests daily with 99.99% uptime and sub-second response times.

## Architecture Overview

### Microservices Design

- **User Service**: Handles authentication, authorization, and user management
- **Order Service**: Manages order processing and fulfillment
- **Payment Service**: Processes payments and financial transactions
- **Notification Service**: Sends emails, SMS, and push notifications
- **Inventory Service**: Manages product inventory and availability

### API Gateway

```java
@RestController
@RequestMapping("/api/v1")
public class ApiGatewayController {

    @Autowired
    private ServiceDiscoveryClient discoveryClient;

    @Autowired
    private CircuitBreakerService circuitBreaker;

    @PostMapping("/orders")
    public ResponseEntity<OrderResponse> createOrder(@RequestBody OrderRequest request) {
        try {
            // Route to Order Service
            String orderServiceUrl = discoveryClient.getServiceUrl("order-service");

            return circuitBreaker.execute(() ->
                restTemplate.postForEntity(orderServiceUrl + "/orders", request, OrderResponse.class)
            );
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.SERVICE_UNAVAILABLE).build();
        }
    }
}
```

## Service Implementation

### User Service

```java
@Service
@Transactional
public class UserService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private KafkaTemplate<String, Object> kafkaTemplate;

    public User createUser(CreateUserRequest request) {
        // Validate input
        validateUserRequest(request);

        // Create user entity
        User user = User.builder()
            .email(request.getEmail())
            .name(request.getName())
            .role(request.getRole())
            .status(UserStatus.ACTIVE)
            .createdAt(LocalDateTime.now())
            .build();

        // Save to database
        User savedUser = userRepository.save(user);

        // Publish event
        UserCreatedEvent event = UserCreatedEvent.builder()
            .userId(savedUser.getId())
            .email(savedUser.getEmail())
            .name(savedUser.getName())
            .timestamp(LocalDateTime.now())
            .build();

        kafkaTemplate.send("user-created", event);

        return savedUser;
    }

    private void validateUserRequest(CreateUserRequest request) {
        if (userRepository.existsByEmail(request.getEmail())) {
            throw new UserAlreadyExistsException("User with email already exists");
        }
    }
}
```

### Order Service with Event Sourcing

```java
@Service
public class OrderService {

    @Autowired
    private OrderRepository orderRepository;

    @Autowired
    private EventStore eventStore;

    @Autowired
    private KafkaTemplate<String, Object> kafkaTemplate;

    public Order createOrder(CreateOrderRequest request) {
        // Create order aggregate
        OrderAggregate order = OrderAggregate.builder()
            .userId(request.getUserId())
            .items(request.getItems())
            .status(OrderStatus.PENDING)
            .build();

        // Apply business logic
        order.validateOrder();
        order.calculateTotal();

        // Save events
        List<DomainEvent> events = order.getUncommittedEvents();
        eventStore.saveEvents(order.getId(), events);

        // Publish events
        events.forEach(event -> kafkaTemplate.send("order-events", event));

        return order.toOrder();
    }
}
```

## Event-Driven Architecture

### Kafka Configuration

```yaml
# application.yml
spring:
  kafka:
    bootstrap-servers: kafka-cluster:9092
    consumer:
      group-id: ${spring.application.name}
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
```

### Event Handlers

```java
@Component
public class OrderEventHandler {

    @Autowired
    private InventoryService inventoryService;

    @Autowired
    private PaymentService paymentService;

    @KafkaListener(topics = "order-created")
    public void handleOrderCreated(OrderCreatedEvent event) {
        try {
            // Reserve inventory
            inventoryService.reserveItems(event.getOrderId(), event.getItems());

            // Process payment
            PaymentResult result = paymentService.processPayment(
                event.getOrderId(),
                event.getTotalAmount()
            );

            if (result.isSuccess()) {
                // Confirm order
                publishOrderConfirmed(event.getOrderId());
            } else {
                // Cancel order
                publishOrderCancelled(event.getOrderId(), result.getReason());
            }
        } catch (Exception e) {
            // Handle error
            publishOrderFailed(event.getOrderId(), e.getMessage());
        }
    }
}
```

## Caching Strategy

### Redis Configuration

```java
@Configuration
@EnableCaching
public class CacheConfig {

    @Bean
    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory connectionFactory) {
        RedisTemplate<String, Object> template = new RedisTemplate<>();
        template.setConnectionFactory(connectionFactory);
        template.setDefaultSerializer(new GenericJackson2JsonRedisSerializer());
        return template;
    }

    @Bean
    public CacheManager cacheManager(RedisConnectionFactory connectionFactory) {
        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()
            .entryTtl(Duration.ofMinutes(30))
            .serializeKeysWith(RedisSerializationContext.SerializationPair
                .fromSerializer(new StringRedisSerializer()))
            .serializeValuesWith(RedisSerializationContext.SerializationPair
                .fromSerializer(new GenericJackson2JsonRedisSerializer()));

        return RedisCacheManager.builder(connectionFactory)
            .cacheDefaults(config)
            .build();
    }
}
```

### Service-Level Caching

```java
@Service
public class ProductService {

    @Autowired
    private ProductRepository productRepository;

    @Cacheable(value = "products", key = "#productId")
    public Product getProduct(String productId) {
        return productRepository.findById(productId)
            .orElseThrow(() -> new ProductNotFoundException("Product not found"));
    }

    @CacheEvict(value = "products", key = "#product.id")
    public Product updateProduct(Product product) {
        return productRepository.save(product);
    }

    @Cacheable(value = "products", key = "'category:' + #category")
    public List<Product> getProductsByCategory(String category) {
        return productRepository.findByCategory(category);
    }
}
```

## Monitoring and Observability

### Health Checks

```java
@Component
public class CustomHealthIndicator implements HealthIndicator {

    @Autowired
    private DatabaseHealthChecker databaseChecker;

    @Autowired
    private KafkaHealthChecker kafkaChecker;

    @Override
    public Health health() {
        Health.Builder builder = new Health.Builder();

        try {
            // Check database connectivity
            boolean dbHealthy = databaseChecker.isHealthy();
            builder.withDetail("database", dbHealthy ? "UP" : "DOWN");

            // Check Kafka connectivity
            boolean kafkaHealthy = kafkaChecker.isHealthy();
            builder.withDetail("kafka", kafkaHealthy ? "UP" : "DOWN");

            if (dbHealthy && kafkaHealthy) {
                return builder.up().build();
            } else {
                return builder.down().build();
            }
        } catch (Exception e) {
            return builder.down().withException(e).build();
        }
    }
}
```

### Metrics Collection

```java
@Component
public class OrderMetrics {

    private final MeterRegistry meterRegistry;
    private final Counter orderCreatedCounter;
    private final Timer orderProcessingTimer;

    public OrderMetrics(MeterRegistry meterRegistry) {
        this.meterRegistry = meterRegistry;
        this.orderCreatedCounter = Counter.builder("orders.created")
            .description("Number of orders created")
            .register(meterRegistry);
        this.orderProcessingTimer = Timer.builder("orders.processing.time")
            .description("Order processing time")
            .register(meterRegistry);
    }

    public void incrementOrderCreated() {
        orderCreatedCounter.increment();
    }

    public void recordOrderProcessingTime(Duration duration) {
        orderProcessingTimer.record(duration);
    }
}
```

## Containerization and Deployment

### Docker Configuration

```dockerfile
FROM openjdk:11-jre-slim

WORKDIR /app

COPY target/user-service.jar app.jar

EXPOSE 8080

HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8080/actuator/health || exit 1

ENTRYPOINT ["java", "-jar", "app.jar"]
```

### Kubernetes Deployment

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
spec:
  replicas: 3
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
    spec:
      containers:
        - name: user-service
          image: user-service:latest
          ports:
            - containerPort: 8080
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: 'kubernetes'
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: 'kafka-cluster:9092'
          resources:
            requests:
              memory: '512Mi'
              cpu: '250m'
            limits:
              memory: '1Gi'
              cpu: '500m'
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
```

## Performance Optimization

### Database Optimization

```sql
-- Optimized indexes
CREATE INDEX idx_orders_user_id ON orders(user_id);
CREATE INDEX idx_orders_status ON orders(status);
CREATE INDEX idx_orders_created_at ON orders(created_at);
CREATE INDEX idx_order_items_order_id ON order_items(order_id);

-- Partitioning for large tables
CREATE TABLE orders_2024 PARTITION OF orders
FOR VALUES FROM ('2024-01-01') TO ('2025-01-01');
```

### Connection Pooling

```yaml
spring:
  datasource:
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
```

## Security Implementation

### Authentication & Authorization

```java
@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .csrf().disable()
            .authorizeHttpRequests(authz -> authz
                .requestMatchers("/api/v1/public/**").permitAll()
                .requestMatchers("/api/v1/admin/**").hasRole("ADMIN")
                .anyRequest().authenticated()
            )
            .oauth2ResourceServer(oauth2 -> oauth2
                .jwt(jwt -> jwt
                    .jwtAuthenticationConverter(jwtAuthenticationConverter())
                )
            );

        return http.build();
    }
}
```

### API Rate Limiting

```java
@Component
public class RateLimitingFilter implements Filter {

    private final RedisTemplate<String, String> redisTemplate;

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {

        HttpServletRequest httpRequest = (HttpServletRequest) request;
        String clientId = getClientId(httpRequest);

        if (isRateLimited(clientId)) {
            HttpServletResponse httpResponse = (HttpServletResponse) response;
            httpResponse.setStatus(HttpStatus.TOO_MANY_REQUESTS.value());
            return;
        }

        chain.doFilter(request, response);
    }

    private boolean isRateLimited(String clientId) {
        String key = "rate_limit:" + clientId;
        String count = redisTemplate.opsForValue().get(key);

        if (count == null) {
            redisTemplate.opsForValue().set(key, "1", Duration.ofMinutes(1));
            return false;
        }

        int currentCount = Integer.parseInt(count);
        if (currentCount >= 100) { // 100 requests per minute
            return true;
        }

        redisTemplate.opsForValue().increment(key);
        return false;
    }
}
```

## Results & Impact

### Performance Metrics

- **80% improvement** in system performance
- **99.99% service availability** achieved
- **50% reduction** in response time
- **Scalable architecture** supporting 10x traffic growth

### Business Impact

- **Improved system reliability** with fault tolerance
- **Reduced operational costs** through automation
- **Enhanced developer productivity** with microservices
- **Better customer experience** with faster response times

## Lessons Learned

### Technical Insights

- **Event-driven architecture** provides better scalability
- **Proper monitoring** is essential for microservices
- **Circuit breakers** prevent cascade failures
- **Caching strategies** significantly improve performance

### Operational Insights

- **Container orchestration** simplifies deployment
- **Service mesh** improves observability
- **Automated testing** is crucial for microservices
- **Documentation** becomes more important with distributed systems

---

_This microservices platform demonstrates our expertise in building scalable, enterprise-grade systems. Contact us to discuss your API and microservices development needs._
5:["$","div",null,{"className":"min-h-screen bg-gradient-to-br from-green-950 via-green-900 to-background dark:from-green-950 dark:via-green-900 dark:to-background relative overflow-hidden","children":[["$","$L10",null,{}],["$","$L11",null,{"count":120,"className":"text-emerald-500/30 dark:text-lime-400/60","size":"md"}],["$","div",null,{"className":"absolute inset-0 -z-10 pointer-events-none","children":[["$","div",null,{"className":"absolute w-96 h-96 bg-gradient-to-r from-emerald-400/15 to-lime-400/15 dark:from-lime-500/30 dark:to-green-500/30 rounded-full blur-3xl","style":{"top":"10%","left":"10%"}}],["$","div",null,{"className":"absolute w-80 h-80 bg-gradient-to-r from-lime-400/10 to-emerald-400/10 dark:from-green-400/25 dark:to-lime-400/25 rounded-full blur-3xl","style":{"bottom":"18%","right":"12%"}}],["$","div",null,{"className":"absolute w-64 h-64 bg-gradient-to-r from-emerald-300/8 to-lime-300/8 dark:from-lime-400/20 dark:to-green-400/20 rounded-full blur-2xl","style":{"top":"58%","left":"48%"}}],["$","div",null,{"className":"absolute w-32 h-32 bg-gradient-to-r from-lime-400/12 to-emerald-400/12 dark:from-lime-500/40 dark:to-green-500/40 rounded-full blur-xl","style":{"top":"28%","right":"28%"}}],["$","div",null,{"className":"absolute w-48 h-48 bg-gradient-to-r from-emerald-300/8 to-lime-300/8 dark:from-green-400/25 dark:to-lime-400/25 rounded-full blur-2xl","style":{"bottom":"38%","left":"18%"}}]]}],["$","$L12",null,{"count":1,"className":"text-emerald-400/30 dark:text-lime-400/50"}],["$","$L13",null,{"title":"ผลงานของเรา","subtitle":"โซลูชันซอฟต์แวร์ตามความต้องการที่ขับเคลื่อนผลลัพธ์"}],["$","section",null,{"className":"py-20 px-4 sm:px-6 lg:px-8 relative z-10","children":["$","div",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8","children":[["$","div",null,{"className":"text-center mb-16","children":[["$","h2",null,{"className":"text-3xl font-bold text-gray-900 dark:text-white mb-4","children":"โครงการเด่น"}],["$","p",null,{"className":"text-lg text-gray-700 dark:text-gray-300","children":"เน้นโครงการพัฒนาซอฟต์แวร์ที่ประสบความสำเร็จของเรา"}]]}],["$","$L14",null,{"projects":[{"metadata":{"id":"saas-subscription-platform","title":"แพลตฟอร์ม SaaS สำหรับการสมัครสมาชิก","description":"แพลตฟอร์ม SaaS ที่ครบครันสำหรับการจัดการการสมัครสมาชิกและการเรียกเก็บเงิน","longDescription":"พัฒนาแพลตฟอร์ม SaaS ที่ครอบคลุมทุกฟีเจอร์สำหรับการจัดการการสมัครสมาชิก การเรียกเก็บเงิน และการจัดการผู้ใช้","image":"https://images.unsplash.com/photo-1460925895917-afdab827c52f?w=800&h=600&fit=crop","technologies":["Next.js","Node.js","PostgreSQL","Stripe","Prisma"],"category":"Web Development","client":"บริษัทซอฟต์แวร์","duration":"6 เดือน","features":["การจัดการการสมัครสมาชิก","ระบบเรียกเก็บเงินอัตโนมัติ","การจัดการผู้ใช้","แดชบอร์ดสำหรับผู้ดูแลระบบ","การรายงานและวิเคราะห์"],"challenges":["การจัดการการเรียกเก็บเงินที่ซับซ้อน","ความปลอดภัยของข้อมูล","การปรับขนาดของระบบ"],"solutions":["ใช้ Stripe สำหรับการเรียกเก็บเงิน","ใช้ Prisma สำหรับการจัดการฐานข้อมูล","ใช้ Next.js สำหรับประสิทธิภาพสูง"],"results":["เพิ่มรายได้ 80%","ลดเวลาในการจัดการ 50%","ความพึงพอใจของลูกค้า 90%"],"liveUrl":"https://saas-platform.com","githubUrl":"https://github.com/saas-platform","featured":true,"date":"$D2024-03-15T00:00:00.000Z","locale":"th","slug":"th/saas-subscription-platform"},"content":"\n# แพลตฟอร์ม SaaS สำหรับการสมัครสมาชิก\n\nแพลตฟอร์ม SaaS ที่ครบครันสำหรับการจัดการการสมัครสมาชิก การเรียกเก็บเงิน และการจัดการผู้ใช้\n\n## ฟีเจอร์หลัก\n\n- **การจัดการสมาชิก**: ระบบจัดการการสมัครสมาชิกที่ครบครัน\n- **การเรียกเก็บเงิน**: ระบบเรียกเก็บเงินอัตโนมัติด้วย Stripe\n- **การจัดการผู้ใช้**: จัดการข้อมูลผู้ใช้และสิทธิ์การเข้าถึง\n- **แดชบอร์ด**: แดชบอร์ดสำหรับผู้ดูแลระบบ\n- **การรายงาน**: ระบบรายงานและวิเคราะห์ข้อมูล\n\n## เทคโนโลยีที่ใช้\n\n- Next.js สำหรับ frontend และ backend\n- Node.js สำหรับ API\n- PostgreSQL สำหรับฐานข้อมูล\n- Stripe สำหรับการเรียกเก็บเงิน\n- Prisma สำหรับการจัดการฐานข้อมูล\n\n## ผลลัพธ์\n\n- เพิ่มรายได้ 80%\n- ลดเวลาในการจัดการ 50%\n- ความพึงพอใจของลูกค้า 90%\n"},{"metadata":{"id":"api-microservices-platform","title":"API & Microservices Platform","description":"Scalable microservices architecture with comprehensive API management","longDescription":"Designed and implemented a microservices platform with API gateway, service discovery, and comprehensive monitoring. The platform handles high traffic loads and provides seamless service communication.","image":"https://images.unsplash.com/photo-1558494949-ef010cbdcc31?q=80&w=1600&auto=format&fit=crop","technologies":["Spring Boot","Kafka","Redis","PostgreSQL","Docker","Kubernetes"],"category":"API Development","client":"Enterprise Client","duration":"8 months","features":["Microservices architecture","API gateway implementation","Service discovery","Message queuing with Kafka","Caching with Redis","Database optimization","Monitoring and logging","Auto-scaling capabilities"],"challenges":["Service communication complexity","Data consistency across services","Performance optimization","Monitoring and debugging"],"solutions":["Implemented event-driven architecture","Used distributed transactions","Applied caching strategies","Implemented comprehensive monitoring"],"results":["80% improvement in system performance","99.99% service availability","50% reduction in response time","Scalable architecture achieved"],"liveUrl":"https://api-platform.com","githubUrl":"https://github.com/api-platform","featured":true,"date":"2024-03-10","locale":"en","slug":"en/api-microservices-platform"},"content":"$15"}],"featured":true,"locale":"th"}]]}]}],"$L16","$L17","$L18"]}]
4:["$","html",null,{"lang":"th","suppressHydrationWarning":true,"children":["$","body",null,{"suppressHydrationWarning":true,"children":["$","$L19",null,{"children":"$L1a"}]}]}]
1e:I[5070,["452","static/chunks/452-e1843827d956986f.js","169","static/chunks/169-8808b033f7a4a331.js","537","static/chunks/537-9e2f5670ec35cf41.js","170","static/chunks/app/%5Blocale%5D/portfolio/page-35fd67a182c796fb.js"],"PortfolioCTA"]
1f:I[4096,["452","static/chunks/452-e1843827d956986f.js","169","static/chunks/169-8808b033f7a4a331.js","537","static/chunks/537-9e2f5670ec35cf41.js","170","static/chunks/app/%5Blocale%5D/portfolio/page-35fd67a182c796fb.js"],"default"]
1b:T4ae7,
# UI/UX Design System

A comprehensive design system that provides a unified visual language and component library for consistent user experiences across all products. Built with modern design principles and accessibility standards.

## Project Overview

This design system was created for a design agency looking to standardize their design processes and improve consistency across multiple client projects. The system includes a complete component library, design tokens, and comprehensive documentation.

## Design System Architecture

### Design Tokens

```json
{
  "colors": {
    "primary": {
      "50": "#f0f9ff",
      "100": "#e0f2fe",
      "200": "#bae6fd",
      "300": "#7dd3fc",
      "400": "#38bdf8",
      "500": "#0ea5e9",
      "600": "#0284c7",
      "700": "#0369a1",
      "800": "#075985",
      "900": "#0c4a6e"
    },
    "semantic": {
      "success": "#10b981",
      "warning": "#f59e0b",
      "error": "#ef4444",
      "info": "#3b82f6"
    }
  },
  "typography": {
    "fontFamily": {
      "sans": ["Inter", "system-ui", "sans-serif"],
      "mono": ["JetBrains Mono", "monospace"]
    },
    "fontSize": {
      "xs": "0.75rem",
      "sm": "0.875rem",
      "base": "1rem",
      "lg": "1.125rem",
      "xl": "1.25rem",
      "2xl": "1.5rem",
      "3xl": "1.875rem",
      "4xl": "2.25rem"
    },
    "fontWeight": {
      "light": "300",
      "normal": "400",
      "medium": "500",
      "semibold": "600",
      "bold": "700"
    }
  },
  "spacing": {
    "0": "0",
    "1": "0.25rem",
    "2": "0.5rem",
    "3": "0.75rem",
    "4": "1rem",
    "5": "1.25rem",
    "6": "1.5rem",
    "8": "2rem",
    "10": "2.5rem",
    "12": "3rem",
    "16": "4rem",
    "20": "5rem",
    "24": "6rem"
  },
  "borderRadius": {
    "none": "0",
    "sm": "0.125rem",
    "base": "0.25rem",
    "md": "0.375rem",
    "lg": "0.5rem",
    "xl": "0.75rem",
    "2xl": "1rem",
    "full": "9999px"
  },
  "shadows": {
    "sm": "0 1px 2px 0 rgb(0 0 0 / 0.05)",
    "base": "0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)",
    "md": "0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)",
    "lg": "0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)",
    "xl": "0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)"
  }
}
```

### Component Library Structure

```
src/
├── components/
│   ├── atoms/
│   │   ├── Button/
│   │   │   ├── Button.tsx
│   │   │   ├── Button.stories.tsx
│   │   │   ├── Button.test.tsx
│   │   │   └── index.ts
│   │   ├── Input/
│   │   ├── Label/
│   │   └── Icon/
│   ├── molecules/
│   │   ├── SearchBox/
│   │   ├── Card/
│   │   ├── FormField/
│   │   └── Navigation/
│   ├── organisms/
│   │   ├── Header/
│   │   ├── Footer/
│   │   ├── Sidebar/
│   │   └── DataTable/
│   └── templates/
│       ├── PageLayout/
│       ├── DashboardLayout/
│       └── AuthLayout/
├── tokens/
│   ├── colors.ts
│   ├── typography.ts
│   ├── spacing.ts
│   └── index.ts
└── styles/
    ├── globals.css
    ├── components.css
    └── utilities.css
```

## Component Implementation

### Button Component

```typescript
import React from 'react';
import { cva, type VariantProps } from 'class-variance-authority';
import { cn } from '@/lib/utils';

const buttonVariants = cva(
  'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background',
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground hover:bg-primary/90',
        destructive:
          'bg-destructive text-destructive-foreground hover:bg-destructive/90',
        outline:
          'border border-input hover:bg-accent hover:text-accent-foreground',
        secondary:
          'bg-secondary text-secondary-foreground hover:bg-secondary/80',
        ghost: 'hover:bg-accent hover:text-accent-foreground',
        link: 'underline-offset-4 hover:underline text-primary',
      },
      size: {
        default: 'h-10 py-2 px-4',
        sm: 'h-9 px-3 rounded-md',
        lg: 'h-11 px-8 rounded-md',
        icon: 'h-10 w-10',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : 'button';
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  }
);
Button.displayName = 'Button';

export { Button, buttonVariants };
```

### Card Component

```typescript
import React from 'react';
import { cn } from '@/lib/utils';

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      'rounded-lg border bg-card text-card-foreground shadow-sm',
      className
    )}
    {...props}
  />
));
Card.displayName = 'Card';

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('flex flex-col space-y-1.5 p-6', className)}
    {...props}
  />
));
CardHeader.displayName = 'CardHeader';

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      'text-2xl font-semibold leading-none tracking-tight',
      className
    )}
    {...props}
  />
));
CardTitle.displayName = 'CardTitle';

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
));
CardDescription.displayName = 'CardDescription';

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn('p-6 pt-0', className)} {...props} />
));
CardContent.displayName = 'CardContent';

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('flex items-center p-6 pt-0', className)}
    {...props}
  />
));
CardFooter.displayName = 'CardFooter';

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
};
```

### Form Components

```typescript
import React from 'react';
import { cn } from '@/lib/utils';

const Input = React.forwardRef<
  HTMLInputElement,
  React.InputHTMLAttributes<HTMLInputElement>
>(({ className, type, ...props }, ref) => {
  return (
    <input
      type={type}
      className={cn(
        'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
        className
      )}
      ref={ref}
      {...props}
    />
  );
});
Input.displayName = 'Input';

const Label = React.forwardRef<
  HTMLLabelElement,
  React.LabelHTMLAttributes<HTMLLabelElement>
>(({ className, ...props }, ref) => (
  <label
    ref={ref}
    className={cn(
      'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70',
      className
    )}
    {...props}
  />
));
Label.displayName = 'Label';

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.TextareaHTMLAttributes<HTMLTextAreaElement>
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
        className
      )}
      ref={ref}
      {...props}
    />
  );
});
Textarea.displayName = 'Textarea';

export { Input, Label, Textarea };
```

## Design Tokens Implementation

### Color System

```typescript
// tokens/colors.ts
export const colors = {
  primary: {
    50: '#f0f9ff',
    100: '#e0f2fe',
    200: '#bae6fd',
    300: '#7dd3fc',
    400: '#38bdf8',
    500: '#0ea5e9',
    600: '#0284c7',
    700: '#0369a1',
    800: '#075985',
    900: '#0c4a6e',
  },
  gray: {
    50: '#f9fafb',
    100: '#f3f4f6',
    200: '#e5e7eb',
    300: '#d1d5db',
    400: '#9ca3af',
    500: '#6b7280',
    600: '#4b5563',
    700: '#374151',
    800: '#1f2937',
    900: '#111827',
  },
  semantic: {
    success: '#10b981',
    warning: '#f59e0b',
    error: '#ef4444',
    info: '#3b82f6',
  },
} as const;

export type ColorScale = keyof typeof colors.primary;
export type SemanticColor = keyof typeof colors.semantic;
```

### Typography System

```typescript
// tokens/typography.ts
export const typography = {
  fontFamily: {
    sans: ['Inter', 'system-ui', 'sans-serif'],
    mono: ['JetBrains Mono', 'monospace'],
  },
  fontSize: {
    xs: '0.75rem',
    sm: '0.875rem',
    base: '1rem',
    lg: '1.125rem',
    xl: '1.25rem',
    '2xl': '1.5rem',
    '3xl': '1.875rem',
    '4xl': '2.25rem',
    '5xl': '3rem',
    '6xl': '3.75rem',
  },
  fontWeight: {
    light: '300',
    normal: '400',
    medium: '500',
    semibold: '600',
    bold: '700',
    extrabold: '800',
  },
  lineHeight: {
    none: '1',
    tight: '1.25',
    snug: '1.375',
    normal: '1.5',
    relaxed: '1.625',
    loose: '2',
  },
  letterSpacing: {
    tighter: '-0.05em',
    tight: '-0.025em',
    normal: '0em',
    wide: '0.025em',
    wider: '0.05em',
    widest: '0.1em',
  },
} as const;
```

## Storybook Documentation

### Button Stories

```typescript
// Button.stories.tsx
import type { Meta, StoryObj } from '@storybook/react';
import { Button } from './Button';

const meta: Meta<typeof Button> = {
  title: 'Components/Button',
  component: Button,
  parameters: {
    layout: 'centered',
  },
  tags: ['autodocs'],
  argTypes: {
    variant: {
      control: { type: 'select' },
      options: [
        'default',
        'destructive',
        'outline',
        'secondary',
        'ghost',
        'link',
      ],
    },
    size: {
      control: { type: 'select' },
      options: ['default', 'sm', 'lg', 'icon'],
    },
  },
};

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    children: 'Button',
  },
};

export const Secondary: Story = {
  args: {
    variant: 'secondary',
    children: 'Secondary',
  },
};

export const Destructive: Story = {
  args: {
    variant: 'destructive',
    children: 'Destructive',
  },
};

export const Outline: Story = {
  args: {
    variant: 'outline',
    children: 'Outline',
  },
};

export const Ghost: Story = {
  args: {
    variant: 'ghost',
    children: 'Ghost',
  },
};

export const Link: Story = {
  args: {
    variant: 'link',
    children: 'Link',
  },
};

export const Small: Story = {
  args: {
    size: 'sm',
    children: 'Small',
  },
};

export const Large: Story = {
  args: {
    size: 'lg',
    children: 'Large',
  },
};

export const Icon: Story = {
  args: {
    size: 'icon',
    children: '🚀',
  },
};
```

## Accessibility Implementation

### Accessibility Guidelines

```typescript
// Accessibility utilities
export const accessibility = {
  // Focus management
  focusVisible:
    'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',

  // Screen reader only content
  srOnly: 'sr-only',

  // High contrast mode support
  highContrast: 'forced-colors:border-[ButtonText]',

  // Reduced motion support
  reducedMotion: 'motion-reduce:transition-none',
} as const;

// ARIA attributes helper
export function getAriaAttributes(props: {
  label?: string;
  describedBy?: string;
  expanded?: boolean;
  selected?: boolean;
  disabled?: boolean;
}) {
  const attributes: Record<string, string | boolean> = {};

  if (props.label) attributes['aria-label'] = props.label;
  if (props.describedBy) attributes['aria-describedby'] = props.describedBy;
  if (props.expanded !== undefined)
    attributes['aria-expanded'] = props.expanded;
  if (props.selected !== undefined)
    attributes['aria-selected'] = props.selected;
  if (props.disabled) attributes['aria-disabled'] = props.disabled;

  return attributes;
}
```

### Accessible Button Implementation

```typescript
// Enhanced Button with accessibility
const AccessibleButton = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : 'button';

    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...getAriaAttributes({
          disabled: props.disabled,
          label: props['aria-label'],
        })}
        {...props}
      />
    );
  }
);
```

## Animation System

### Animation Tokens

```typescript
// tokens/animations.ts
export const animations = {
  duration: {
    fast: '150ms',
    normal: '300ms',
    slow: '500ms',
  },
  easing: {
    linear: 'linear',
    ease: 'ease',
    easeIn: 'ease-in',
    easeOut: 'ease-out',
    easeInOut: 'ease-in-out',
    bounce: 'cubic-bezier(0.68, -0.55, 0.265, 1.55)',
  },
  transitions: {
    all: 'all 300ms ease',
    colors:
      'color 300ms ease, background-color 300ms ease, border-color 300ms ease',
    transform: 'transform 300ms ease',
    opacity: 'opacity 300ms ease',
  },
} as const;
```

### Animation Components

```typescript
// Animated components
import { motion } from 'framer-motion';

export const AnimatedCard = motion(Card);
export const AnimatedButton = motion(Button);

// Animation variants
export const fadeInUp = {
  initial: { opacity: 0, y: 20 },
  animate: { opacity: 1, y: 0 },
  exit: { opacity: 0, y: -20 },
};

export const scaleIn = {
  initial: { opacity: 0, scale: 0.9 },
  animate: { opacity: 1, scale: 1 },
  exit: { opacity: 0, scale: 0.9 },
};

export const slideInLeft = {
  initial: { opacity: 0, x: -20 },
  animate: { opacity: 1, x: 0 },
  exit: { opacity: 0, x: 20 },
};
```

## Testing Strategy

### Component Testing

```typescript
// Button.test.tsx
import { render, screen, fireEvent } from '@testing-library/react';
import { Button } from './Button';

describe('Button', () => {
  it('renders button with text', () => {
    render(<Button>Click me</Button>);
    expect(screen.getByText('Click me')).toBeInTheDocument();
  });

  it('handles click events', () => {
    const handleClick = jest.fn();
    render(<Button onClick={handleClick}>Click me</Button>);

    fireEvent.click(screen.getByText('Click me'));
    expect(handleClick).toHaveBeenCalledTimes(1);
  });

  it('applies correct variant classes', () => {
    render(<Button variant='secondary'>Secondary</Button>);
    const button = screen.getByText('Secondary');
    expect(button).toHaveClass('bg-secondary');
  });

  it('is accessible', () => {
    render(<Button aria-label='Submit form'>Submit</Button>);
    const button = screen.getByLabelText('Submit form');
    expect(button).toBeInTheDocument();
  });
});
```

### Visual Regression Testing

```typescript
// Visual regression tests with Chromatic
import { Meta, StoryObj } from '@storybook/react';
import { Button } from './Button';

const meta: Meta<typeof Button> = {
  title: 'Components/Button',
  component: Button,
  parameters: {
    chromatic: { disableSnapshot: false },
  },
};

export default meta;
type Story = StoryObj<typeof meta>;

export const VisualRegression: Story = {
  args: {
    children: 'Button',
  },
  parameters: {
    chromatic: {
      viewports: [320, 768, 1024],
      pauseAnimationAtEnd: true,
    },
  },
};
```

## Documentation Website

### Design System Documentation

```typescript
// Documentation components
export function DesignTokensPage() {
  return (
    <div className='space-y-8'>
      <h1>Design Tokens</h1>

      <section>
        <h2>Colors</h2>
        <div className='grid grid-cols-2 md:grid-cols-4 gap-4'>
          {Object.entries(colors.primary).map(([key, value]) => (
            <div key={key} className='space-y-2'>
              <div
                className='w-full h-16 rounded border'
                style={{ backgroundColor: value }}
              />
              <div className='text-sm'>
                <div className='font-mono'>{key}</div>
                <div className='text-muted-foreground'>{value}</div>
              </div>
            </div>
          ))}
        </div>
      </section>

      <section>
        <h2>Typography</h2>
        <div className='space-y-4'>
          {Object.entries(typography.fontSize).map(([key, value]) => (
            <div key={key}>
              <div className='font-sans' style={{ fontSize: value }}>
                {key} - The quick brown fox jumps over the lazy dog
              </div>
              <div className='text-sm text-muted-foreground font-mono'>
                {value}
              </div>
            </div>
          ))}
        </div>
      </section>
    </div>
  );
}
```

## Results & Impact

### Performance Metrics

- **70% faster development time** with reusable components
- **100% design consistency** across all products
- **WCAG 2.1 AA compliance** achieved
- **Improved developer experience** with comprehensive documentation

### Business Impact

- **Reduced design debt** through systematic approach
- **Faster time-to-market** for new features
- **Improved brand consistency** across touchpoints
- **Enhanced accessibility** for all users

## Lessons Learned

### Design Insights

- **Design tokens** provide flexibility and consistency
- **Component documentation** is crucial for adoption
- **Accessibility** should be built-in from the start
- **Animation guidelines** improve user experience

### Technical Insights

- **TypeScript** improves component reliability
- **Storybook** accelerates development and testing
- **Automated testing** ensures component quality
- **Version control** is essential for design systems

---

_This UI/UX Design System demonstrates our expertise in creating comprehensive design systems that improve both developer experience and user experience. Contact us to discuss your design system needs._
1c:T3956,
# LINE Integration System

A comprehensive LINE bot integration system designed to automate customer service operations and provide intelligent responses to user inquiries. Built with Node.js and integrated with advanced natural language processing capabilities.

## Project Overview

The LINE Integration System was developed for a customer service company looking to automate their support operations and provide 24/7 assistance to customers through the popular LINE messaging platform. The system handles thousands of daily conversations with high accuracy and customer satisfaction.

## Key Features

### LINE Bot Integration

- **Rich message support** with carousel, quick reply, and flex messages
- **Webhook handling** for real-time message processing
- **User profile management** with persistent data storage
- **Group conversation support** for team collaboration

### Natural Language Processing

- **Intent recognition** to understand user requests
- **Entity extraction** for structured data processing
- **Sentiment analysis** for customer satisfaction monitoring
- **Multi-language support** for international users

### Workflow Automation

- **Automated ticket creation** for complex inquiries
- **Escalation rules** for urgent issues
- **Knowledge base integration** for instant answers
- **CRM system synchronization** for customer data

## Technical Implementation

### LINE Bot Setup

```javascript
const line = require('@line/bot-sdk');
const express = require('express');

const config = {
  channelAccessToken: process.env.CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.CHANNEL_SECRET,
};

const client = new line.Client(config);
const app = express();

// Webhook endpoint
app.post('/webhook', line.middleware(config), (req, res) => {
  Promise.all(req.body.events.map(handleEvent))
    .then((result) => res.json(result))
    .catch((err) => {
      console.error('Webhook error:', err);
      res.status(500).end();
    });
});

async function handleEvent(event) {
  if (event.type !== 'message' || event.message.type !== 'text') {
    return Promise.resolve(null);
  }

  try {
    // Process message with NLP
    const response = await processMessage(
      event.message.text,
      event.source.userId
    );

    // Send response
    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: response.text,
    });
  } catch (error) {
    console.error('Error handling event:', error);
    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: 'Sorry, I encountered an error. Please try again.',
    });
  }
}
```

### Natural Language Processing

```javascript
const natural = require('natural');
const compromise = require('compromise');

class NLPService {
  constructor() {
    this.classifier = new natural.BayesClassifier();
    this.loadTrainingData();
  }

  async processMessage(text, userId) {
    // Intent classification
    const intent = this.classifier.classify(text);

    // Entity extraction
    const entities = this.extractEntities(text);

    // Sentiment analysis
    const sentiment = this.analyzeSentiment(text);

    // Generate response based on intent
    const response = await this.generateResponse(intent, entities, userId);

    // Log conversation for analytics
    await this.logConversation(userId, text, response, intent, sentiment);

    return response;
  }

  extractEntities(text) {
    const doc = compromise(text);
    return {
      people: doc.people().out('array'),
      places: doc.places().out('array'),
      organizations: doc.organizations().out('array'),
      dates: doc.dates().out('array'),
      money: doc.money().out('array'),
    };
  }

  analyzeSentiment(text) {
    const analyzer = new natural.SentimentAnalyzer();
    const stemmer = natural.PorterStemmer;
    const tokenizer = new natural.WordTokenizer();

    const tokens = tokenizer.tokenize(text);
    const stems = tokens.map((token) => stemmer.stem(token));

    return analyzer.getSentiment(stems);
  }

  async generateResponse(intent, entities, userId) {
    switch (intent) {
      case 'greeting':
        return await this.handleGreeting(userId);
      case 'product_inquiry':
        return await this.handleProductInquiry(entities);
      case 'support_request':
        return await this.handleSupportRequest(entities, userId);
      case 'order_status':
        return await this.handleOrderStatus(entities, userId);
      default:
        return await this.handleUnknownIntent();
    }
  }
}
```

### Rich Message Templates

```javascript
class MessageTemplates {
  static createCarouselMessage(products) {
    return {
      type: 'template',
      altText: 'Product catalog',
      template: {
        type: 'carousel',
        columns: products.map((product) => ({
          thumbnailImageUrl: product.image,
          title: product.name,
          text: product.description,
          actions: [
            {
              type: 'postback',
              label: 'View Details',
              data: `action=view_product&id=${product.id}`,
            },
            {
              type: 'uri',
              label: 'Buy Now',
              uri: product.purchaseUrl,
            },
          ],
        })),
      },
    };
  }

  static createQuickReplyMessage(text, options) {
    return {
      type: 'text',
      text: text,
      quickReply: {
        items: options.map((option) => ({
          type: 'action',
          action: {
            type: 'postback',
            label: option.label,
            data: option.data,
          },
        })),
      },
    };
  }

  static createFlexMessage(title, content) {
    return {
      type: 'flex',
      altText: title,
      contents: {
        type: 'bubble',
        body: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'text',
              text: title,
              weight: 'bold',
              size: 'xl',
            },
            {
              type: 'text',
              text: content,
              wrap: true,
            },
          ],
        },
        footer: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'button',
              action: {
                type: 'uri',
                label: 'Learn More',
                uri: 'https://example.com',
              },
            },
          ],
        },
      },
    };
  }
}
```

### Database Integration

```javascript
const mongoose = require('mongoose');

// User schema
const userSchema = new mongoose.Schema({
  lineUserId: { type: String, unique: true, required: true },
  name: String,
  email: String,
  preferences: {
    language: { type: String, default: 'en' },
    notifications: { type: Boolean, default: true },
  },
  conversationHistory: [
    {
      timestamp: { type: Date, default: Date.now },
      message: String,
      intent: String,
      sentiment: Number,
      response: String,
    },
  ],
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now },
});

// Conversation analytics schema
const analyticsSchema = new mongoose.Schema({
  date: { type: Date, default: Date.now },
  totalMessages: Number,
  uniqueUsers: Number,
  averageSentiment: Number,
  topIntents: [
    {
      intent: String,
      count: Number,
    },
  ],
  responseTime: {
    average: Number,
    p95: Number,
  },
});

const User = mongoose.model('User', userSchema);
const Analytics = mongoose.model('Analytics', analyticsSchema);

class DatabaseService {
  async getUser(lineUserId) {
    let user = await User.findOne({ lineUserId });

    if (!user) {
      user = new User({ lineUserId });
      await user.save();
    }

    return user;
  }

  async updateUserConversation(
    lineUserId,
    message,
    intent,
    sentiment,
    response
  ) {
    await User.updateOne(
      { lineUserId },
      {
        $push: {
          conversationHistory: {
            message,
            intent,
            sentiment,
            response,
          },
        },
        $set: { updatedAt: new Date() },
      }
    );
  }

  async generateDailyAnalytics() {
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    const users = await User.find({
      'conversationHistory.timestamp': { $gte: today },
    });

    const analytics = {
      date: today,
      totalMessages: users.reduce(
        (sum, user) => sum + user.conversationHistory.length,
        0
      ),
      uniqueUsers: users.length,
      averageSentiment: this.calculateAverageSentiment(users),
      topIntents: this.getTopIntents(users),
      responseTime: await this.calculateResponseTime(),
    };

    await Analytics.create(analytics);
    return analytics;
  }
}
```

### Workflow Automation

```javascript
class WorkflowService {
  async handleSupportRequest(entities, userId) {
    const user = await databaseService.getUser(userId);

    // Check if user has existing tickets
    const existingTicket = await this.findExistingTicket(userId);
    if (existingTicket) {
      return this.getTicketStatusMessage(existingTicket);
    }

    // Create new ticket
    const ticket = await this.createSupportTicket({
      userId,
      description: entities.description || 'General support request',
      priority: this.determinePriority(entities),
      category: this.categorizeRequest(entities),
    });

    // Notify support team
    await this.notifySupportTeam(ticket);

    // Send confirmation to user
    return MessageTemplates.createFlexMessage(
      'Support Ticket Created',
      `Your support ticket #${ticket.id} has been created. Our team will respond within 24 hours.`
    );
  }

  async createSupportTicket(ticketData) {
    const ticket = {
      id: this.generateTicketId(),
      userId: ticketData.userId,
      description: ticketData.description,
      priority: ticketData.priority,
      category: ticketData.category,
      status: 'open',
      createdAt: new Date(),
      assignedTo: null,
    };

    // Save to database
    await Ticket.create(ticket);

    // Integrate with CRM system
    await this.syncWithCRM(ticket);

    return ticket;
  }

  determinePriority(entities) {
    const urgentKeywords = ['urgent', 'critical', 'emergency', 'asap'];
    const text = entities.text?.toLowerCase() || '';

    if (urgentKeywords.some((keyword) => text.includes(keyword))) {
      return 'high';
    }

    return 'medium';
  }
}
```

### Performance Optimization

```javascript
const Redis = require('redis');
const redisClient = Redis.createClient(process.env.REDIS_URL);

class CacheService {
  async getCachedResponse(intent, entities) {
    const key = `response:${intent}:${JSON.stringify(entities)}`;
    const cached = await redisClient.get(key);
    return cached ? JSON.parse(cached) : null;
  }

  async cacheResponse(intent, entities, response) {
    const key = `response:${intent}:${JSON.stringify(entities)}`;
    await redisClient.setex(key, 3600, JSON.stringify(response)); // Cache for 1 hour
  }

  async getUserContext(userId) {
    const key = `context:${userId}`;
    const context = await redisClient.get(key);
    return context ? JSON.parse(context) : {};
  }

  async setUserContext(userId, context) {
    const key = `context:${userId}`;
    await redisClient.setex(key, 1800, JSON.stringify(context)); // Cache for 30 minutes
  }
}
```

## Analytics and Reporting

### Conversation Analytics

```javascript
class AnalyticsService {
  async generateReport(startDate, endDate) {
    const conversations = await Conversation.find({
      timestamp: { $gte: startDate, $lte: endDate },
    });

    const report = {
      totalConversations: conversations.length,
      uniqueUsers: new Set(conversations.map((c) => c.userId)).size,
      averageMessagesPerConversation:
        this.calculateAverageMessages(conversations),
      topIntents: this.getTopIntents(conversations),
      sentimentDistribution: this.analyzeSentimentDistribution(conversations),
      responseTimeMetrics: this.calculateResponseTimeMetrics(conversations),
      userSatisfactionScore: await this.calculateSatisfactionScore(
        conversations
      ),
    };

    return report;
  }

  async calculateSatisfactionScore(conversations) {
    const feedbackMessages = conversations.filter(
      (c) => c.intent === 'feedback' || c.message.includes('satisfied')
    );

    if (feedbackMessages.length === 0) return null;

    const positiveFeedback = feedbackMessages.filter(
      (c) => c.sentiment > 0.2
    ).length;

    return (positiveFeedback / feedbackMessages.length) * 100;
  }
}
```

## Security and Compliance

### Data Protection

```javascript
class SecurityService {
  encryptSensitiveData(data) {
    const crypto = require('crypto');
    const algorithm = 'aes-256-gcm';
    const key = Buffer.from(process.env.ENCRYPTION_KEY, 'hex');
    const iv = crypto.randomBytes(16);

    const cipher = crypto.createCipher(algorithm, key);
    cipher.setAAD(Buffer.from('line-bot-data'));

    let encrypted = cipher.update(JSON.stringify(data), 'utf8', 'hex');
    encrypted += cipher.final('hex');

    const authTag = cipher.getAuthTag();

    return {
      encrypted,
      iv: iv.toString('hex'),
      authTag: authTag.toString('hex'),
    };
  }

  validateWebhookSignature(body, signature) {
    const crypto = require('crypto');
    const hash = crypto
      .createHmac('SHA256', process.env.CHANNEL_SECRET)
      .update(body)
      .digest('base64');

    return hash === signature;
  }
}
```

## Results & Impact

### Performance Metrics

- **70% reduction** in response time
- **90% customer satisfaction** rate
- **24/7 automated support** availability
- **Seamless integration** with existing systems

### Business Impact

- **Reduced support costs** by 60%
- **Improved customer experience** with instant responses
- **Increased customer engagement** through rich messaging
- **Better data insights** from conversation analytics

## Lessons Learned

### Technical Insights

- **NLP accuracy** improves with more training data
- **Caching strategies** significantly improve response times
- **Rich messages** enhance user engagement
- **Webhook reliability** requires proper error handling

### User Experience

- **Quick replies** reduce user effort
- **Context awareness** improves conversation flow
- **Multi-language support** expands user base
- **Analytics insights** help optimize bot performance

---

_This LINE Integration System demonstrates our expertise in chatbot development and natural language processing. Contact us to discuss your messaging platform integration needs._
1d:T17b8,
# Custom Web Application Platform

This project involved building a comprehensive web application platform from scratch, designed to handle complex business operations with real-time capabilities and seamless user experience.

## Project Overview

The platform serves as a central hub for managing business operations, providing users with powerful tools for data management, communication, and workflow automation. Built with modern web technologies, it ensures scalability, security, and optimal performance.

## Key Features Implemented

### User Authentication & Authorization

- **Multi-factor authentication** for enhanced security
- **Role-based access control** with granular permissions
- **Single sign-on (SSO)** integration with enterprise systems
- **Session management** with automatic timeout and renewal

### Real-time Data Synchronization

- **WebSocket connections** for instant updates
- **Conflict resolution** for concurrent data modifications
- **Offline support** with local data caching
- **Push notifications** for important events

### Advanced Search & Filtering

- **Full-text search** across all data types
- **Faceted search** with multiple filter combinations
- **Search suggestions** and auto-completion
- **Saved searches** for frequently used queries

### Payment Integration

- **Stripe integration** for secure payment processing
- **Multiple payment methods** support
- **Subscription management** with automated billing
- **Invoice generation** and tracking

## Technical Implementation

### Frontend Architecture

```typescript
// Component structure example
interface UserDashboardProps {
  userId: string;
  permissions: Permission[];
}

export function UserDashboard({ userId, permissions }: UserDashboardProps) {
  const { data: userData, isLoading } = useUserData(userId);
  const { mutate: updateUser } = useUpdateUser();

  if (isLoading) return <LoadingSpinner />;

  return (
    <div className='dashboard'>
      <UserProfile user={userData} />
      <DataGrid
        data={userData.records}
        permissions={permissions}
        onUpdate={updateUser}
      />
      <RealTimeNotifications />
    </div>
  );
}
```

### Backend Services

```typescript
// API route example
export async function POST(request: Request) {
  try {
    const { userId, data } = await request.json();

    // Validate user permissions
    const user = await validateUser(userId);
    if (!user.hasPermission('write')) {
      return Response.json({ error: 'Unauthorized' }, { status: 403 });
    }

    // Process data with real-time updates
    const result = await processData(data);
    await broadcastUpdate(userId, result);

    return Response.json({ success: true, data: result });
  } catch (error) {
    return Response.json({ error: 'Internal server error' }, { status: 500 });
  }
}
```

### Database Design

```sql
-- Optimized database schema
CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email VARCHAR(255) UNIQUE NOT NULL,
  password_hash VARCHAR(255) NOT NULL,
  role VARCHAR(50) NOT NULL,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE user_permissions (
  user_id UUID REFERENCES users(id),
  permission VARCHAR(100) NOT NULL,
  resource VARCHAR(100),
  PRIMARY KEY (user_id, permission, resource)
);

-- Indexes for performance
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_role ON users(role);
CREATE INDEX idx_permissions_user ON user_permissions(user_id);
```

## Performance Optimizations

### Frontend Optimizations

- **Code splitting** with dynamic imports
- **Image optimization** using Next.js Image component
- **Caching strategies** with React Query
- **Bundle optimization** reducing initial load time by 40%

### Backend Optimizations

- **Database indexing** for faster queries
- **Connection pooling** for efficient database usage
- **Caching layer** with Redis for frequently accessed data
- **API rate limiting** to prevent abuse

## Security Measures

### Data Protection

- **Encryption at rest** for sensitive data
- **HTTPS enforcement** for all communications
- **Input validation** and sanitization
- **SQL injection prevention** with parameterized queries

### Access Control

- **JWT tokens** with short expiration times
- **Refresh token rotation** for enhanced security
- **Audit logging** for all user actions
- **IP whitelisting** for admin access

## Results & Impact

### Performance Metrics

- **50% reduction** in data processing time
- **99.9% uptime** achieved with proper monitoring
- **40% increase** in user engagement
- **Seamless payment processing** with 99.8% success rate

### Business Impact

- **Streamlined operations** reducing manual work by 60%
- **Improved user satisfaction** with intuitive interface
- **Scalable architecture** supporting 10x user growth
- **Cost reduction** of 30% through automation

## Lessons Learned

### Technical Insights

- **Microservices architecture** provides better scalability
- **Real-time features** significantly improve user experience
- **Proper caching** is crucial for performance
- **Security should be built-in**, not added later

### Project Management

- **Agile methodology** with 2-week sprints worked well
- **Regular client feedback** ensured alignment with requirements
- **Continuous testing** prevented major issues in production
- **Documentation** is essential for long-term maintenance

## Future Enhancements

### Planned Features

- **Mobile application** for iOS and Android
- **Advanced analytics** with custom dashboards
- **AI-powered insights** for business intelligence
- **Third-party integrations** with popular business tools

### Technical Improvements

- **Microservices migration** for better scalability
- **GraphQL API** for more flexible data fetching
- **Progressive Web App** features
- **Advanced monitoring** with custom metrics

---

_This project demonstrates our expertise in building complex web applications with modern technologies. Contact us to discuss your custom software development needs._
16:["$","section",null,{"className":"py-20 relative z-10","children":["$","div",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8","children":[["$","div",null,{"className":"text-center mb-16","children":[["$","h2",null,{"className":"text-3xl font-bold text-gray-900 dark:text-white mb-4","children":"โครงการทั้งหมด"}],["$","p",null,{"className":"text-lg text-gray-700 dark:text-gray-300","children":"รวมผลงานการพัฒนาซอฟต์แวร์ตามความต้องการทั้งหมดของเรา"}]]}],["$","$L14",null,{"projects":[{"metadata":{"id":"iot-monitoring-hub","title":"IoT Monitoring Hub","description":"Unified telemetry dashboard and device control center","longDescription":"Built an IoT hub aggregating telemetry from thousands of devices with alerting, digital twins, and map visualizations.","image":"https://images.unsplash.com/photo-1518770660439-4636190af475?q=80&w=1600&auto=format&fit=crop","technologies":["Next.js","MQTT","TimescaleDB","WebSockets","Mapbox"],"category":"IoT","client":"Industrial","duration":"6 months","features":["Alerts","Digital twins","Map views","Role‑based access"],"challenges":["High‑volume ingestion"],"solutions":["Batching + time‑series compression"],"results":["MTTR -30%","Uptime 99.95%"],"liveUrl":"https://example.com/iot","githubUrl":"https://github.com/example/iot-hub","featured":false,"date":"2024-08-03","locale":"en","slug":"en/iot-monitoring-hub"},"content":"\n# IoT Monitoring Hub\n\nOperational visibility at scale with real‑time telemetry.\n"},{"metadata":{"id":"ui-ux-design-system","title":"UI/UX Design System","description":"Comprehensive design system with component library and guidelines","longDescription":"Created a comprehensive UI/UX design system including component library, design guidelines, and documentation. The system ensures consistency across all products and improves development efficiency.","image":"/images/portfolio/web-application.svg","technologies":["Figma","React","Storybook","TypeScript","CSS","Design Tokens"],"category":"UI/UX Design","client":"Design Agency","duration":"3 months","features":["Component library","Design tokens","Style guide","Interactive documentation","Accessibility guidelines","Responsive design patterns","Animation guidelines","Brand guidelines"],"challenges":["Component consistency","Design token management","Documentation maintenance","Accessibility compliance"],"solutions":["Implemented design token system","Created comprehensive documentation","Applied accessibility best practices","Developed automated testing"],"results":["70% faster development time","100% design consistency","WCAG 2.1 AA compliance","Improved developer experience"],"liveUrl":"https://design-system.com","githubUrl":"https://github.com/design-system","featured":false,"date":"2024-07-10","locale":"en","slug":"en/ui-ux-design-system"},"content":"$1b"},{"metadata":{"id":"analytics-dashboard","title":"Analytics Dashboard","description":"Interactive BI dashboard with role‑based insights and exports","longDescription":"Delivered a responsive analytics dashboard with custom charts, drill‑downs, scheduled reports, and data governance controls.","image":"https://images.unsplash.com/photo-1551288049-bebda4e38f71?q=80&w=1600&auto=format&fit=crop","technologies":["Next.js","TypeScript","Tailwind","D3.js","PostgreSQL"],"category":"Data Visualization","client":"FinTech","duration":"4 months","features":["Drill‑down charts","CSV/PDF export","Row‑level security"],"challenges":["Large datasets","Access control"],"solutions":["Windowed queries","RLS policies"],"results":["-40% time‑to‑insight","+22% stakeholder adoption"],"liveUrl":"https://example.com/analytics","githubUrl":"https://github.com/example/analytics-dashboard","featured":false,"date":"2024-06-18","locale":"en","slug":"en/analytics-dashboard"},"content":"\n# Analytics Dashboard\n\nReal‑time business intelligence with beautiful, accessible charts.\n"},{"metadata":{"id":"mobile-commerce-app","title":"Mobile Commerce App","description":"Cross‑platform mobile app for seamless shopping and order tracking","longDescription":"Built a performant React Native ecommerce app with secure checkout, push notifications, and real‑time order tracking backed by a scalable API.","image":"https://images.unsplash.com/photo-1517245386807-bb43f82c33c4?q=80&w=1600&auto=format&fit=crop","technologies":["React Native","TypeScript","Next.js","Node.js","PostgreSQL"],"category":"Mobile Development","client":"Retail Brand","duration":"5 months","features":["Secure checkout","Push notifications","Order tracking","Wishlist","Dark mode"],"challenges":["Offline support","Payment compliance"],"solutions":["Local cache sync","PCI‑compliant flows"],"results":["+35% conversion rate","-25% cart abandonment"],"liveUrl":"https://example.com/app","githubUrl":"https://github.com/example/mobile-commerce-app","featured":false,"date":"2024-05-12","locale":"en","slug":"en/mobile-commerce-app"},"content":"\n# Mobile Commerce App\n\nAn elegant, high‑performance mobile shopping experience with secure payments and real‑time order tracking.\n"},{"metadata":{"id":"line-integration-system","title":"LINE Integration System","description":"Comprehensive LINE bot integration with automated workflows","longDescription":"Developed a sophisticated LINE bot integration system that handles customer inquiries, automated responses, and seamless integration with existing business systems. The system includes natural language processing and workflow automation.","image":"https://images.pexels.com/photos/3184339/pexels-photo-3184339.jpeg?auto=compress&cs=tinysrgb&w=1600","technologies":["Node.js","LINE Messaging API","MongoDB","Redis","Webhook","Express.js"],"category":"Integration Development","client":"Customer Service Company","duration":"3 months","features":["LINE bot integration","Automated responses","Natural language processing","Customer data management","Workflow automation","Analytics and reporting","Multi-language support","Rich message support"],"challenges":["LINE API limitations","Natural language understanding","Response time optimization","Scalability requirements"],"solutions":["Implemented efficient webhook handling","Used NLP libraries for text processing","Applied caching for faster responses","Designed scalable architecture"],"results":["70% reduction in response time","90% customer satisfaction","24/7 automated support","Seamless integration achieved"],"liveUrl":"https://line-bot.com","githubUrl":"https://github.com/line-bot","featured":false,"date":"2024-04-05","locale":"en","slug":"en/line-integration-system"},"content":"$1c"},"$5:props:children:5:props:children:props:children:1:props:projects:0","$5:props:children:5:props:children:props:children:1:props:projects:1",{"metadata":{"id":"line-integration-system-th","title":"ระบบเชื่อมต่อ LINE สำหรับธุรกิจ","description":"ระบบจัดการลูกค้าผ่าน LINE ที่ช่วยเพิ่มการมีส่วนร่วมและความพึงพอใจ","longDescription":"ระบบเชื่อมต่อ LINE ที่ออกแบบมาเพื่อช่วยธุรกิจในการจัดการลูกค้าและเพิ่มการมีส่วนร่วมผ่านแพลตฟอร์ม LINE","image":"https://images.unsplash.com/photo-1611224923853-80b023f02d71?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2039&q=80","technologies":["LINE Bot API","Node.js","MongoDB","Redis","Webhook"],"category":"Integration","client":"ร้านค้าปลีก","duration":"4 เดือน","features":["LINE Bot สำหรับตอบคำถามอัตโนมัติ","ระบบจัดการลูกค้าและประวัติการซื้อ","การส่งข้อความโปรโมชั่นแบบกำหนดเป้าหมาย","Rich Message และ Flex Message","การเชื่อมต่อกับระบบ POS"],"challenges":["การจัดการข้อความจำนวนมากแบบเรียลไทม์","การออกแบบ UX ที่เหมาะสมกับ LINE","การเชื่อมต่อกับระบบเดิม"],"solutions":["ใช้ Redis สำหรับการแคชข้อมูลและจัดการคิว","ออกแบบ Rich Message ที่ใช้งานง่าย","ใช้ Webhook และ API สำหรับการเชื่อมต่อ"],"results":["เพิ่มการมีส่วนร่วมของลูกค้า 150%","ลดเวลาในการตอบคำถาม 80%","เพิ่มยอดขายผ่าน LINE 60%","เพิ่มความพึงพอใจของลูกค้า 90%"],"liveUrl":"https://line.example.com","githubUrl":"https://github.com/example","featured":false,"date":"2024-01-25","locale":"th","slug":"th/line-integration-system"},"content":"\n# ระบบเชื่อมต่อ LINE สำหรับธุรกิจ\n\n## ภาพรวมโครงการ\n\nระบบเชื่อมต่อ LINE นี้ถูกพัฒนาขึ้นเพื่อช่วยร้านค้าปลีกในการจัดการลูกค้าและเพิ่มการมีส่วนร่วมผ่านแพลตฟอร์ม LINE\n\n## ฟีเจอร์หลัก\n\n### LINE Bot อัจฉริยะ\n- ตอบคำถามลูกค้าอัตโนมัติ\n- ให้คำแนะนำผลิตภัณฑ์\n- จัดการการจองและนัดหมาย\n\n### ระบบจัดการลูกค้า\n- เก็บประวัติการซื้อ\n- จัดกลุ่มลูกค้าตามพฤติกรรม\n- ส่งข้อความโปรโมชั่นแบบกำหนดเป้าหมาย\n\n## เทคโนโลยีที่ใช้\n\n- **LINE Bot API**: สำหรับการสร้าง Bot\n- **Backend**: Node.js, Express.js\n- **Database**: MongoDB\n- **Caching**: Redis\n- **Integration**: Webhook, REST API\n\n## ผลลัพธ์ที่ได้\n\nระบบช่วยเพิ่มการมีส่วนร่วมของลูกค้าและยอดขายได้อย่างมีนัยสำคัญ พร้อมทั้งลดภาระงานของพนักงานในการตอบคำถามลูกค้า\n"},{"metadata":{"id":"api-microservices-platform-th","title":"แพลตฟอร์ม API และไมโครเซอร์วิส","description":"ระบบ API ที่รองรับการขยายตัวและเชื่อมต่อกับระบบต่างๆ ได้อย่างมีประสิทธิภาพ","longDescription":"แพลตฟอร์ม API และไมโครเซอร์วิสที่ออกแบบมาเพื่อรองรับการขยายตัวของธุรกิจ พร้อมระบบจัดการที่ทันสมัย","image":"https://images.unsplash.com/photo-1558494949-ef010cbdcc31?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80","technologies":["Spring Boot","Kafka","Redis","Docker","Kubernetes","PostgreSQL"],"category":"Backend Development","client":"บริษัทการเงิน","duration":"8 เดือน","features":["ระบบไมโครเซอร์วิสแบบกระจาย","API Gateway สำหรับการจัดการ","Event-driven architecture ด้วย Kafka","ระบบ monitoring และ logging","Auto-scaling และ load balancing"],"challenges":["การจัดการข้อมูลระหว่างไมโครเซอร์วิส","การรักษาความสอดคล้องของข้อมูล","การจัดการความล้มเหลวของระบบ"],"solutions":["ใช้ Event Sourcing และ CQRS pattern","ใช้ Kafka สำหรับการสื่อสารแบบ asynchronous","ใช้ Circuit Breaker pattern สำหรับความทนทาน"],"results":["เพิ่มประสิทธิภาพการประมวลผล 300%","ลดเวลาในการตอบสนอง 70%","รองรับผู้ใช้พร้อมกันได้ 100,000 คน","ลดเวลาในการ deploy 80%"],"liveUrl":"https://api.example.com","githubUrl":"https://github.com/example","featured":true,"date":"2024-01-20","locale":"th","slug":"th/api-microservices-platform"},"content":"\n# แพลตฟอร์ม API และไมโครเซอร์วิส\n\n## ภาพรวมโครงการ\n\nแพลตฟอร์ม API และไมโครเซอร์วิสนี้ถูกพัฒนาขึ้นเพื่อรองรับการขยายตัวของธุรกิจการเงินที่ต้องการระบบที่ทนทานและมีประสิทธิภาพสูง\n\n## สถาปัตยกรรมระบบ\n\nระบบใช้สถาปัตยกรรมไมโครเซอร์วิสที่แยกการทำงานออกเป็นส่วนๆ แต่ละส่วนสามารถพัฒนาและ deploy ได้อย่างอิสระ\n\n## เทคโนโลยีหลัก\n\n- **Backend**: Spring Boot, Spring Cloud\n- **Message Queue**: Apache Kafka\n- **Caching**: Redis\n- **Container**: Docker, Kubernetes\n- **Database**: PostgreSQL, MongoDB\n\n## ผลลัพธ์ที่ได้\n\nระบบสามารถรองรับผู้ใช้จำนวนมากได้อย่างมีประสิทธิภาพ และสามารถขยายตัวได้ตามความต้องการของธุรกิจ\n"},{"metadata":{"id":"web-application-platform","title":"Custom Web Application Platform","description":"A comprehensive web application solution with advanced features","longDescription":"Built a full-featured web application platform from scratch using modern web technologies. The platform includes user authentication, data management, real-time updates, payment processing, and admin dashboard.","image":"https://images.unsplash.com/photo-1518779578993-ec3579fee39f?q=80&w=1600&auto=format&fit=crop","technologies":["React","Next.js","TypeScript","Node.js","PostgreSQL","Stripe"],"category":"Web Development","client":"Technology Company","duration":"6 months","features":["User authentication and authorization","Real-time data synchronization","Advanced search and filtering","Payment integration with Stripe","Admin dashboard for management","Email notifications","Responsive design","API integration"],"challenges":["Complex data relationships","Real-time synchronization requirements","Scalability concerns","Security implementation"],"solutions":["Implemented efficient database design","Used WebSocket for real-time updates","Applied microservices architecture","Implemented comprehensive security measures"],"results":["50% reduction in data processing time","99.9% uptime achieved","40% increase in user engagement","Seamless payment processing"],"liveUrl":"https://example.com","githubUrl":"https://github.com/example","featured":true,"date":"2024-01-15","locale":"en","slug":"en/web-application-platform"},"content":"$1d"},{"metadata":{"id":"web-application-platform-th","title":"แพลตฟอร์มเว็บแอปพลิเคชันสำหรับธุรกิจ","description":"ระบบจัดการธุรกิจแบบครบวงจรที่ช่วยเพิ่มประสิทธิภาพการทำงาน","longDescription":"แพลตฟอร์มเว็บแอปพลิเคชันที่ออกแบบมาเพื่อตอบสนองความต้องการของธุรกิจสมัยใหม่ ด้วยฟีเจอร์ที่ครบครันและใช้งานง่าย","image":"https://images.unsplash.com/photo-1460925895917-afdab827c52f?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2015&q=80","technologies":["React","Next.js","Node.js","PostgreSQL","Redis","Docker"],"category":"Web Development","client":"บริษัทเทคโนโลยี","duration":"6 เดือน","features":["ระบบจัดการผู้ใช้และสิทธิ์การเข้าถึง","แดชบอร์ดแบบเรียลไทม์","ระบบรายงานและวิเคราะห์ข้อมูล","การแจ้งเตือนแบบหลายช่องทาง","API สำหรับการเชื่อมต่อระบบภายนอก"],"challenges":["การจัดการข้อมูลจำนวนมากแบบเรียลไทม์","การออกแบบระบบที่รองรับผู้ใช้หลายพันคน","การรักษาความปลอดภัยของข้อมูล"],"solutions":["ใช้ Redis สำหรับการแคชข้อมูลและเซสชัน","ออกแบบฐานข้อมูลแบบ normalized และใช้ indexing","ใช้ JWT และ HTTPS สำหรับความปลอดภัย"],"results":["เพิ่มประสิทธิภาพการทำงาน 40%","ลดเวลาในการประมวลผลข้อมูล 60%","เพิ่มความพึงพอใจของผู้ใช้ 85%","ลดต้นทุนการดำเนินงาน 25%"],"liveUrl":"https://example.com","githubUrl":"https://github.com/example","featured":true,"date":"2024-01-15","locale":"th","slug":"th/web-application-platform"},"content":"\n# แพลตฟอร์มเว็บแอปพลิเคชันสำหรับธุรกิจ\n\n## ภาพรวมโครงการ\n\nแพลตฟอร์มเว็บแอปพลิเคชันนี้ถูกพัฒนาขึ้นเพื่อตอบสนองความต้องการของธุรกิจสมัยใหม่ที่ต้องการระบบจัดการที่ครบครันและมีประสิทธิภาพ\n\n## เทคโนโลยีที่ใช้\n\n- **Frontend**: React, Next.js, TypeScript\n- **Backend**: Node.js, Express.js\n- **Database**: PostgreSQL, Redis\n- **Infrastructure**: Docker, AWS\n\n## ผลลัพธ์ที่ได้\n\nโครงการนี้ประสบความสำเร็จในการเพิ่มประสิทธิภาพการทำงานของธุรกิจอย่างมีนัยสำคัญ โดยสามารถลดเวลาในการประมวลผลข้อมูลและเพิ่มความพึงพอใจของผู้ใช้ได้อย่างชัดเจน\n"}],"locale":"th"}]]}]}]
17:["$","$L1e",null,{"title":"พร้อมเริ่มโครงการของคุณแล้วหรือยัง?","description":"มาพูดคุยความต้องการและสร้างโซลูชันที่เหมาะกับธุรกิจของคุณ","buttonText":"เริ่มต้นวันนี้"}]
18:["$","$L1f",null,{}]
20:I[6417,["450","static/chunks/app/%5Blocale%5D/layout-40bb82a3c937926b.js"],"default"]
1a:["$","$L20",null,{"locale":"th","now":"$D2025-10-20T16:06:15.833Z","timeZone":"UTC","messages":{"seo":{"home":{"title":"TechStudio - โซลูชันการพัฒนาซอฟต์แวร์ตามความต้องการ","description":"สร้างโซลูชันซอฟต์แวร์ตามความต้องการสำหรับธุรกิจของคุณ เราสร้างแอปพลิเคชันเว็บ ระบบอัตโนมัติ และ API ที่ช่วยให้ธุรกิจเติบโตด้วยเทคโนโลยี","keywords":"การพัฒนาซอฟต์แวร์ตามความต้องการ, แอปพลิเคชันเว็บ, ระบบอัตโนมัติ, การพัฒนา API, โซลูชันธุรกิจ, TechStudio"},"about":{"title":"เกี่ยวกับ TechStudio - ทีมพัฒนาซอฟต์แวร์ตามความต้องการ","description":"เรียนรู้เกี่ยวกับภารกิจของ TechStudio ในการส่งมอบโซลูชันซอฟต์แวร์ตามความต้องการที่แก้ปัญหาธุรกิจจริง ทีมของเราเชี่ยวชาญในการสร้างแอปพลิเคชันเว็บ ระบบอัตโนมัติ และการพัฒนา API","keywords":"เกี่ยวกับ TechStudio, ทีมพัฒนาซอฟต์แวร์, โซลูชันตามความต้องการ, เทคโนโลยีธุรกิจ"},"services":{"title":"บริการพัฒนาซอฟต์แวร์ตามความต้องการ - TechStudio","description":"สำรวจบริการพัฒนาซอฟต์แวร์ตามความต้องการของเรา รวมถึงแอปพลิเคชันเว็บ ระบบอัตโนมัติ การพัฒนา API และโซลูชันธุรกิจตามความต้องการ","keywords":"บริการพัฒนาซอฟต์แวร์, แอปพลิเคชันเว็บ, ระบบอัตโนมัติ, การพัฒนา API, โซลูชันตามความต้องการ"},"portfolio":{"title":"ผลงาน - โครงการพัฒนาซอฟต์แวร์ตามความต้องการ","description":"ดูผลงานโครงการพัฒนาซอฟต์แวร์ตามความต้องการที่ประสบความสำเร็จ ดูว่าเราช่วยธุรกิจแก้ปัญหาด้วยโซลูชันเทคโนโลยีตามความต้องการอย่างไร","keywords":"ผลงานพัฒนาซอฟต์แวร์, โครงการตามความต้องการ, โซลูชันธุรกิจ, กรณีศึกษา"},"blog":{"title":"บล็อก - ข้อมูลเชิงลึกการพัฒนาซอฟต์แวร์ตามความต้องการ","description":"อ่านข้อมูลเชิงลึกล่าสุดเกี่ยวกับการพัฒนาซอฟต์แวร์ตามความต้องการ แอปพลิเคชันเว็บ ระบบอัตโนมัติ และเทรนด์เทคโนโลยี","keywords":"บล็อกพัฒนาซอฟต์แวร์, ข้อมูลเชิงลึกเทคโนโลยี, การพัฒนาเว็บ, ระบบอัตโนมัติ"},"contact":{"title":"ติดต่อ TechStudio - ขอใบเสนอราคาซอฟต์แวร์ตามความต้องการ","description":"พร้อมเริ่มโครงการซอฟต์แวร์ตามความต้องการของคุณแล้วหรือยัง? ติดต่อ TechStudio เพื่อขอคำปรึกษาและใบเสนอราคาสำหรับความต้องการการพัฒนาแอปพลิเคชันเว็บ ระบบอัตโนมัติ หรือ API ของคุณ","keywords":"ติดต่อ TechStudio, ใบเสนอราคาพัฒนาซอฟต์แวร์, คำปรึกษาซอฟต์แวร์ตามความต้องการ"}},"navigation":{"home":"หน้าแรก","about":"เกี่ยวกับเรา","services":"บริการ","portfolio":"ผลงาน","blog":"บล็อก","contact":"ติดต่อ"},"home":{"hero":{"badge":"โซลูชันการพัฒนาซอฟต์แวร์ตามความต้องการ","title":"เปลี่ยนธุรกิจของคุณด้วย","titleHighlight":"การพัฒนาเว็บมืออาชีพ","description":"สร้างโซลูชันซอฟต์แวร์ตามความต้องการที่แก้ปัญหาธุรกิจจริง เราสร้างแอปพลิเคชันเว็บ ระบบอัตโนมัติ และ API ที่ช่วยให้ธุรกิจเติบโตด้วยเทคโนโลยี","cta":"เริ่มต้น","ctaSecondary":"ดูผลงาน","stats":{"projects":"500+","projectsLabel":"โปรเจกต์","clients":"10K+","clientsLabel":"ลูกค้า","satisfaction":"98%","satisfactionLabel":"พึงพอใจ"}},"services":{"title":"โซลูชันซอฟต์แวร์ตามความต้องการ","subtitle":"เราสร้างซอฟต์แวร์ที่เหมาะกับความต้องการของธุรกิจของคุณอย่างสมบูรณ์แบบ","uiuxDesign":{"title":"การออกแบบ UI/UX","description":"อินเทอร์เฟซที่สวยงามและใช้งานง่ายที่ดึงดูดและแปลงผู้เยี่ยมชมเป็นลูกค้า"},"webDevelopment":{"title":"การพัฒนาเว็บ","description":"เว็บไซต์และแอปพลิเคชันเว็บตามความต้องการที่สร้างด้วยเทคโนโลยีสมัยใหม่และแนวทางปฏิบัติที่ดีที่สุด"},"fullStackDevelopment":{"title":"การพัฒนาแบบเต็มสแต็ก","description":"โซลูชันแบบครบวงจรตั้งแต่ส่วนหน้าไปจนถึงส่วนหลังด้วยการรวมที่ราบรื่น"},"webDesign":{"title":"การออกแบบเว็บ","description":"การออกแบบที่สร้างสรรค์และตอบสนองที่สะท้อนแบรนด์ของคุณและดึงดูดผู้ชม"},"lineBotDevelopment":{"title":"การพัฒนา LINE Bot","description":"แชทบอทอัจฉริยะและโซลูชันอัตโนมัติสำหรับการรวมแพลตฟอร์ม LINE"},"businessAutomation":{"title":"การทำให้ธุรกิจเป็นอัตโนมัติ","description":"ปรับปรุงกระบวนการทางธุรกิจของคุณด้วยอัตโนมัติอัจฉริยะและการปรับปรุงเวิร์กโฟลว์"},"apiDevelopment":{"title":"การพัฒนา API","description":"API ที่แข็งแกร่งและขยายได้ที่ขับเคลื่อนแอปพลิเคชันของคุณและรวมกับบริการของบุคคลที่สาม"}},"about":{"title":"ทำไมต้องเลือก TechStudio?","subtitle":"เราเข้าใจว่าทุกธุรกิจมีความเป็นเอกลักษณ์ และความต้องการซอฟต์แวร์ก็เช่นกัน","content":"เราไม่เชื่อในโซลูชันแบบเดียวที่ใช้ได้กับทุกคน ทุกโครงการเริ่มต้นด้วยการทำความเข้าใจความต้องการ ความท้าทาย และเป้าหมายเฉพาะของคุณ ทีมของเราทำงานร่วมกับคุณอย่างใกล้ชิดเพื่อออกแบบและพัฒนาซอฟต์แวร์ที่เหมาะกับกระบวนการทางธุรกิจของคุณอย่างสมบูรณ์แบบ"},"cta":{"title":"พร้อมสร้างโซลูชันซอฟต์แวร์ที่กำหนดเองแล้วหรือยัง?","subtitle":"มาหารือเกี่ยวกับโปรเจ็กต์ของคุณและสร้างโซลูชันที่ขับเคลื่อนธุรกิจของคุณไปข้างหน้า","primaryButton":"เริ่มโปรเจ็กต์ของคุณ","secondaryButton":"นัดหมายการปรึกษา"},"testimonials":{"title":"ลูกค้าพูดถึงเรา","subtitle":"ความไว้วางใจจากลูกค้าคือแรงผลักดันของเรา","testimonial1":{"quote":"ทำให้ระบบจองคิวของเราใช้งานง่ายขึ้นมาก คนไข้สามารถจองได้เองผ่านมือถือ ลดภาระงานของพนักงานได้เยอะ","name":"คุณสมชาย ใจดี","company":"MD Clinic"},"testimonial2":{"quote":"POS ที่ออกแบบให้ใช้ง่ายมาก พนักงานเรียนรู้ได้ไว ลูกค้าชอบระบบออเดอร์ที่เราใช้","name":"คุณอรทัย รักการค้า","company":"Brew & Co."},"testimonial3":{"quote":"Dashboard ที่ได้มาทำให้เราตัดสินใจได้เร็วขึ้น มองเห็นข้อมูลสำคัญได้ชัดเจน คุ้มค่ามาก","name":"คุณวิชัย ธุรกิจดี","company":"Tech Startup"}},"techStack":{"title":"เทคโนโลยีที่เราใช้","subtitle":"เครื่องมือและเฟรมเวิร์กที่ทันสมัยสำหรับการพัฒนาที่มีประสิทธิภาพ"},"whyChoose":{"title":"พันธมิตรด้านการพัฒนาซอฟต์แวร์ที่เชื่อถือได้","subtitle":"เรารวมความเชี่ยวชาญด้านเทคนิคเข้ากับความเข้าใจทางธุรกิจเพื่อส่งมอบโซลูชันที่ขับเคลื่อนผลลัพธ์จริง","badge":"ทำไมต้องเลือก TechStudio","features":{"expertTeam":{"title":"ทีมผู้เชี่ยวชาญ","description":"นักพัฒนาและนักออกแบบที่มีประสบการณ์พร้อมความเชี่ยวชาญในเทคโนโลยีสมัยใหม่และแนวทางปฏิบัติที่ดีที่สุด"},"scalableSolutions":{"title":"โซลูชันที่ขยายได้","description":"สร้างขึ้นเพื่อเติบโตไปพร้อมกับธุรกิจของคุณ รับประกันว่าซอฟต์แวร์ของคุณสามารถจัดการกับความต้องการและความซับซ้อนที่เพิ่มขึ้นได้"},"qualityFocus":{"title":"มุ่งเน้นคุณภาพ","description":"กระบวนการทดสอบและการประกันคุณภาพที่เข้มงวดรับประกันการส่งมอบซอฟต์แวร์ที่เชื่อถือได้และปราศจากข้อผิดพลาด"},"globalReach":{"title":"เข้าถึงทั่วโลก","description":"ให้บริการลูกค้าทั่วโลกด้วยรูปแบบการมีส่วนร่วมที่ยืดหยุ่นและความสามารถในการสนับสนุน 24/7"}}}},"services":{"title":"บริการพัฒนาซอฟต์แวร์ตามความต้องการ","subtitle":"เราให้บริการโซลูชันพัฒนาซอฟต์แวร์ที่ครอบคลุมตามความต้องการของธุรกิจของคุณ","process":{"title":"กระบวนการพัฒนาของเรา","subtitle":"เราทำงานอย่างเป็นระบบเพื่อให้ส่งมอบโครงการได้สำเร็จ","steps":{"one":{"title":"ค้นหาและวิเคราะห์","description":"ทำความเข้าใจความต้องการทางธุรกิจและข้อกำหนดเชิงเทคนิคของคุณ"},"two":{"title":"วางแผน","description":"จัดทำแผนโครงการและสเปกทางเทคนิคอย่างละเอียด"},"three":{"title":"พัฒนา","description":"พัฒนาซอฟต์แวร์ตามความต้องการ พร้อมอัปเดตความคืบหน้าอย่างสม่ำเสมอ"},"four":{"title":"เปิดใช้งาน","description":"เผยแพร่ระบบและให้การสนับสนุนอย่างต่อเนื่อง"}}},"offerings":{"uiuxDesign":{"title":"การออกแบบ UI/UX","description":"อินเทอร์เฟซที่สวยงาม ใช้งานง่าย ช่วยดึงดูดและเปลี่ยนผู้เยี่ยมชมให้เป็นลูกค้า","items":{"item1":"การออกแบบส่วนติดต่อผู้ใช้ (UI)","item2":"การวิจัยประสบการณ์ผู้ใช้ (UX Research)","item3":"การสร้างต้นแบบและ Wireframe","item4":"ระบบดีไซน์ (Design Systems)"}},"webDevelopment":{"title":"การพัฒนาเว็บ","description":"เว็บไซต์และเว็บแอปที่สร้างด้วยเทคโนโลยีสมัยใหม่ตามแนวทางปฏิบัติที่ดีที่สุด","items":{"item1":"แอปพลิเคชัน React & Next.js","item2":"การออกแบบให้รองรับทุกอุปกรณ์ (Responsive)","item3":"การเพิ่มประสิทธิภาพความเร็ว (Performance)","item4":"SEO และการเข้าถึง (Accessibility)"}},"fullStackDevelopment":{"title":"การพัฒนาแบบเต็มสแต็ก","description":"โซลูชันครบวงจรตั้งแต่ส่วนหน้าไปส่วนหลัง พร้อมการเชื่อมต่อที่ราบรื่น","items":{"item1":"RESTful APIs","item2":"ออกแบบฐานข้อมูล","item3":"การเชื่อมต่อระบบ (Integration)","item4":"สถาปัตยกรรม Microservices"}},"lineBot":{"title":"การพัฒนา LINE Bot","description":"แชตบอทอัจฉริยะและระบบอัตโนมัติสำหรับการเชื่อมต่อแพลตฟอร์ม LINE"},"businessAutomation":{"title":"ระบบอัตโนมัติธุรกิจ","description":"ปรับปรุงกระบวนการด้วยระบบอัตโนมัติและปรับแต่งเวิร์กโฟลว์อย่างชาญฉลาด"},"apiDevelopment":{"title":"การพัฒนา API","description":"API ที่แข็งแกร่งและขยายได้สำหรับขับเคลื่อนแอปของคุณและเชื่อมต่อบริการต่างๆ"}},"cta":{"title":"พร้อมเริ่มโครงการของคุณแล้วหรือยัง?","description":"มาพูดคุยความต้องการและสร้างโซลูชันที่เหมาะกับธุรกิจของคุณ","button":"เริ่มต้นวันนี้"},"webDevelopment":{"title":"การพัฒนาแอปพลิเคชันเว็บ","description":"แอปพลิเคชันเว็บตามความต้องการที่สร้างด้วยเทคโนโลยีสมัยใหม่และแนวทางปฏิบัติที่ดีที่สุดเพื่อประสิทธิภาพและความสามารถในการขยายที่ดีที่สุด"},"automation":{"title":"การทำให้กระบวนการทางธุรกิจเป็นอัตโนมัติ","description":"ปรับปรุงการดำเนินงานของคุณด้วยโซลูชันอัตโนมัติตามความต้องการที่ลดงานด้วยตนเองและปรับปรุงประสิทธิภาพ"},"api":{"title":"การพัฒนา API และการรวมระบบ","description":"API ที่แข็งแกร่งและการรวมระบบที่เชื่อมต่อแอปพลิเคชันทางธุรกิจของคุณและเปิดใช้งานการไหลของข้อมูลที่ราบรื่น"}},"about":{"title":"เกี่ยวกับ TechStudio","subtitle":"เรามีความหลงใหลในการสร้างโซลูชันซอฟต์แวร์ตามความต้องการที่แก้ปัญหาธุรกิจจริงและขับเคลื่อนการเติบโต","vision":{"title":"วิสัยทัศน์ของเรา","content":"เป็นผู้ให้บริการโซลูชันซอฟต์แวร์ตามความต้องการชั้นนำที่เปลี่ยนแปลงธุรกิจและสร้างคุณค่าอย่างยั่งยืนผ่านเทคโนโลยีที่ล้ำสมัย"},"mission":{"title":"พันธกิจของเรา","content":"ส่งมอบโซลูชันซอฟต์แวร์คุณภาพสูง ขยายได้ ที่ตอบสนองความต้องการเฉพาะของลูกค้าและช่วยให้พวกเขาบรรลุเป้าหมายทางธุรกิจ"},"values":{"title":"ค่านิยมของเรา","content":"เราเชื่อในความโปร่งใส การทำงานร่วมกัน และการปรับปรุงอย่างต่อเนื่องเพื่อส่งมอบผลลัพธ์ที่ยอดเยี่ยมให้กับลูกค้าของเรา"},"team":{"title":"ทีมงานของเรา","description":"พบกับบุคคลที่มีความสามารถที่อยู่เบื้องหลังความสำเร็จในการพัฒนาซอฟต์แวร์ตามความต้องการของเรา"},"tools":{"title":"เครื่องมือและเทคโนโลยี","description":"เราใช้เทคโนโลยีที่ล้ำสมัยและระเบียบวิธีที่ได้รับการพิสูจน์แล้วเพื่อส่งมอบผลลัพธ์ที่ยอดเยี่ยม"}},"portfolio":{"title":"ผลงานของเรา","subtitle":"โซลูชันซอฟต์แวร์ตามความต้องการที่ขับเคลื่อนผลลัพธ์","backToPortfolio":"กลับไปยังผลงาน","technologies":"เทคโนโลยีที่ใช้","features":"ฟีเจอร์หลัก","challenges":"ความท้าทาย","solutions":"โซลูชัน","results":"ผลลัพธ์","relatedProjects":"โครงการที่เกี่ยวข้อง","liveDemo":"ดูตัวอย่าง","viewCode":"ดูโค้ด","featuredProjects":"โครงการเด่น","featuredDescription":"เน้นโครงการพัฒนาซอฟต์แวร์ที่ประสบความสำเร็จของเรา","allProjects":"โครงการทั้งหมด","allDescription":"รวมผลงานการพัฒนาซอฟต์แวร์ตามความต้องการทั้งหมดของเรา","cta":{"title":"พร้อมเริ่มโครงการของคุณแล้วหรือยัง?","description":"มาพูดคุยความต้องการและสร้างโซลูชันที่เหมาะกับธุรกิจของคุณ","button":"เริ่มต้นวันนี้"}},"contact":{"title":"ติดต่อเรา","subtitle":"พร้อมเริ่มโครงการซอฟต์แวร์ตามความต้องการของคุณแล้วหรือยัง? เรายินดีที่จะได้ยินจากคุณ","contactInfo":{"title":"ติดต่อเรา","description":"พร้อมเริ่มโครงการซอฟต์แวร์ตามความต้องการของคุณแล้วหรือยัง? เรายินดีที่จะได้ยินจากคุณ ส่งข้อความมาให้เราและเราจะตอบกลับภายใน 24 ชั่วโมง","email":"อีเมล","phone":"โทรศัพท์","office":"ที่ทำงาน"},"form":{"title":"ส่งข้อความมาให้เรา","name":"ชื่อเต็ม","namePlaceholder":"ชื่อเต็มของคุณ","email":"ที่อยู่อีเมล","emailPlaceholder":"your@email.com","company":"บริษัท","companyPlaceholder":"ชื่อบริษัทของคุณ","message":"ข้อความ","messagePlaceholder":"บอกเราเกี่ยวกับความต้องการโครงการของคุณ...","submit":"ส่งข้อความ","success":"ขอบคุณ! ข้อความของคุณถูกส่งเรียบร้อยแล้ว","error":"ขออภัย มีข้อผิดพลาดในการส่งข้อความของคุณ กรุณาลองอีกครั้ง"},"faq":{"title":"คำถามที่พบบ่อย","subtitle":"คำถามทั่วไปเกี่ยวกับบริการพัฒนาซอฟต์แวร์ตามความต้องการของเรา","question1":"โครงการทั่วไปใช้เวลานานเท่าไหร่?","answer1":"ระยะเวลาโครงการแตกต่างกันไปตามความซับซ้อนและความต้องการ แอปพลิเคชันเว็บง่ายๆ มักใช้เวลา 2-4 เดือน ในขณะที่โซลูชันองค์กรที่ซับซ้อนอาจใช้เวลา 6-12 เดือน เราจะให้รายละเอียดระยะเวลาโครงการในระหว่างการปรึกษาเบื้องต้น","question2":"คุณทำงานกับเทคโนโลยีอะไรบ้าง?","answer2":"เราทำงานกับเทคโนโลยีสมัยใหม่รวมถึง React, Next.js, Node.js, Python, TypeScript และฐานข้อมูลต่างๆ เราเลือกเทคโนโลยีที่เหมาะสมที่สุดตามความต้องการเฉพาะและความต้องการทางธุรกิจของคุณ","question3":"คุณให้การสนับสนุนอย่างต่อเนื่องหรือไม่?","answer3":"ใช่ เรามีบริการสนับสนุนและบำรุงรักษาที่ครอบคลุมรวมถึงการแก้ไขข้อผิดพลาด การอัปเดต การปรับปรุงฟีเจอร์ และการสนับสนุนทางเทคนิค เรามีแพ็กเกจการสนับสนุนที่ยืดหยุ่นเพื่อตอบสนองความต้องการของคุณ","question4":"คุณรับประกันคุณภาพโครงการอย่างไร?","answer4":"เราปฏิบัติตามแนวทางปฏิบัติที่ดีที่สุดในอุตสาหกรรมรวมถึงการตรวจสอบโค้ด การทดสอบอัตโนมัติ การรวมอย่างต่อเนื่อง และการประชุมรับฟีดแบ็กจากลูกค้าเป็นประจำ กระบวนการประกันคุณภาพของเรารับประกันซอฟต์แวร์ที่เชื่อถือได้และบำรุงรักษาได้"},"info":{"title":"ข้อมูลติดต่อ","email":"อีเมล","phone":"โทรศัพท์","address":"ที่อยู่","hours":"เวลาทำการ"}},"footer":{"description":"โซลูชันพัฒนาซอฟต์แวร์ตามความต้องการสำหรับธุรกิจ","company":"TechStudio","newsletter":{"title":"ติดตามข่าวสาร","description":"รับการอัปเดตล่าสุดเกี่ยวกับเทรนด์การพัฒนาซอฟต์แวร์ตามความต้องการและโครงการของเรา","placeholder":"ใส่อีเมลของคุณ","button":"สมัครสมาชิก"},"links":{"about":"เกี่ยวกับเรา","services":"บริการ","portfolio":"ผลงาน","blog":"บล็อก","contact":"ติดต่อ","privacy":"นโยบายความเป็นส่วนตัว","terms":"เงื่อนไขการใช้งาน"}},"blog":{"title":"บทความและอินไซต์","subtitle":"แบ่งปันความรู้ ประสบการณ์ และเทคนิคต่างๆ เกี่ยวกับการพัฒนาซอฟต์แวร์ตามความต้องการ","noPosts":"ไม่พบบทความ","noPostsDescription":"กรุณาตรวจสอบอีกครั้งในภายหลังสำหรับเนื้อหาใหม่!","newsletter":{"title":"รับบทความใหม่ทุกสัปดาห์","description":"สมัครรับ Newsletter เพื่อรับ UX Tips, Case Studies และความรู้ใหม่ๆ ส่งตรงถึงอีเมล","placeholder":"อีเมลของคุณ","subscribe":"สมัคร","privacy":"เราให้ความสำคัญกับความเป็นส่วนตัว และจะไม่ส่ง Spam"},"backToBlog":"← กลับไปที่บล็อก","tags":"แท็ก","relatedArticles":"บทความที่เกี่ยวข้อง"},"techDescriptions":{"nextjs":"เฟรมเวิร์ก React แบบฟูลสแต็กพร้อม SSR, ระบบเส้นทาง และการปรับแต่งประสิทธิภาพ","react":"ไลบรารี UI แบบคอมโพเนนต์สำหรับสร้างเว็บแอปที่โต้ตอบได้","typescript":"JavaScript แบบมีชนิดข้อมูลเพื่อโค้ดที่ขยายและดูแลรักษาได้ง่าย","tailwindcss":"เฟรมเวิร์ก CSS แบบยูทิลิตี้เพื่อพัฒนา UI ได้รวดเร็ว","astro":"เครื่องมือสร้างเว็บไซต์สมัยใหม่แบบสแตติกด้วยสถาปัตยกรรม Islands","vercel":"แพลตฟอร์มคลาวด์สำหรับดีพลอยต์ฟรอนต์เอนด์และฟังก์ชันขอบเครือข่าย","aws":"บริการคลาวด์และโครงสร้างพื้นฐานที่ครบถ้วน","auth0":"แพลตฟอร์มจัดการตัวตนและการเข้าถึงสำหรับการยืนยันตัวตนที่ปลอดภัย","claude":"ผู้ช่วย AI สำหรับเวิร์กโฟลว์การพัฒนาและการสร้างโค้ด","figma":"เครื่องมือออกแบบและทำต้นแบบร่วมกันสำหรับ UI/UX","git":"เวอร์ชันคอนโทรลแบบกระจายศูนย์สำหรับการพัฒนาร่วมกัน","html5":"มาตรฐานมาร์กอัปเว็บสมัยใหม่พร้อมองค์ประกอบเชิงความหมาย","java":"ภาษาระดับองค์กรสำหรับบริการแบ็กเอนด์","kubernetes":"แพลตฟอร์มจัดการคอนเทนเนอร์เพื่อการดีพลอยที่ขยายได้","kong":"เกตเวย์ API และเซอร์วิสเมชสำหรับสถาปัตยกรรมไมโครเซอร์วิส","nodejs":"รันไทม์ JavaScript สำหรับการพัฒนาฝั่งเซิร์ฟเวอร์","go":"ภาษาที่รวดเร็วและมีประสิทธิภาพสำหรับบริการแบ็กเอนด์","springboot":"เฟรมเวิร์ก Java ระดับองค์กรสำหรับไมโครเซอร์วิสและเว็บแอป","python":"ภาษายืดหยุ่นสำหรับแบ็กเอนด์ วิทยาการข้อมูล และงานอัตโนมัติ","postgresql":"ฐานข้อมูลเชิงสัมพันธ์โอเพ่นซอร์สขั้นสูง","redis":"สตอร์อินเมมโมรีสำหรับแคชและงานเรียลไทม์","kafka":"แพลตฟอร์มสตรีมมิงแบบกระจายสำหรับประมวลผลข้อมูลเรียลไทม์","docker":"แพลตฟอร์มคอนเทนเนอร์เพื่อการดีพลอยที่สม่ำเสมอ","line":"การเชื่อมต่อแพลตฟอร์ม LINE สำหรับแชตบอทและระบบอัตโนมัติ","n8n":"แพลตฟอร์มอัตโนมัติเวิร์กโฟลว์สำหรับงานธุรกิจ","make":"แพลตฟอร์มอัตโนมัติแบบโนโค้ดสำหรับเชื่อมต่อแอปและบริการ"}},"children":"$L21"}]
21:["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]
b:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
7:null
9:{"metadata":[["$","title","0",{"children":"TechStudio - Custom Software Development Solutions"}],["$","meta","1",{"name":"description","content":"Build custom software solutions for your business. We create tailored web applications, automation systems, and APIs that help businesses grow with technology."}],["$","meta","2",{"name":"author","content":"TechStudio"}],["$","meta","3",{"name":"keywords","content":"custom software development, web applications, automation, API development, business solutions, TechStudio"}],["$","meta","4",{"name":"robots","content":"index, follow"}],["$","meta","5",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","meta","6",{"property":"og:title","content":"TechStudio - Custom Software Development Solutions"}],["$","meta","7",{"property":"og:description","content":"Build custom software solutions for your business. We create tailored web applications, automation systems, and APIs that help businesses grow with technology."}],["$","meta","8",{"property":"og:url","content":"https://tech-studio.com/"}],["$","meta","9",{"property":"og:site_name","content":"TechStudio"}],["$","meta","10",{"property":"og:locale","content":"en_US"}],["$","meta","11",{"property":"og:image","content":"https://tech-studio.com/og-image.jpg"}],["$","meta","12",{"property":"og:image:width","content":"1200"}],["$","meta","13",{"property":"og:image:height","content":"630"}],["$","meta","14",{"property":"og:image:alt","content":"TechStudio - Custom Software Development"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","17",{"name":"twitter:title","content":"TechStudio - Custom Software Development Solutions"}],["$","meta","18",{"name":"twitter:description","content":"Build custom software solutions for your business. We create tailored web applications, automation systems, and APIs that help businesses grow with technology."}],["$","meta","19",{"name":"twitter:image","content":"https://tech-studio.com/og-image.jpg"}]],"error":null,"digest":"$undefined"}
e:"$9:metadata"
